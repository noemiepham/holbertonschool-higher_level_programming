First import ``add_integer``

    >>> add_integer = __import__('0-add_integer').add_integer

""" Given two integers, return the sum.
:param a: int
:param b=98: int
:return: int
"""

Basic usage:
    >>> add_integer(1, 2)
    3

Test present: integer casting:

    >>> add_integer(100, -2)
    98

Test present: check type:

    >>> add_integer(2)
    100

Test if a ou b is float, must be first carsted to integers:

    >>> add_integer(100.3, -2)
    98

Test if a ou b is not int or float print Typerror: a ou b must to be integer:

    >>> add_integer(4, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer("None")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test present: Float overflow:
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
 
Test present: cannot convert float NaN to integer
    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer