First import ``BaseGeometry``
""" Test Value is int and and empty """

     >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

     >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
     >>> bg = BaseGeometry()
     >>> 
     >>> bg.integer_validator("my_int", 12)
     >>> bg.integer_validator("width", 89)

 Test case input 2 strings
     >>> try:
     ...     bg.integer_validator("name", "John")
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [TypeError] name must be an integer

Test present: area()
     >>> try:
     ...     print(bg.area())
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [Exception] area() is not implemented

Test case input str and less than equal 0
     >>> try:
     ...     bg.integer_validator("age", 0)
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [ValueError] age must be greater than 0

Test case input negative
     >>> try:
     ...     bg.integer_validator("distance", -4)
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [ValueError] distance must be greater than 0

Test cas input empty
     >>> try:
     ...     bg.integer_validator()
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test case one arguments
     >>> try:
     ...     bg.integer_validator("age")
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [TypeError] integer_validator() missing 1 required positional argument: 'value'

Test present: integer_validator(“age”, (4,))
     >>> try:
     ...     bg.integer_validator("age", (4,))
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [TypeError] age must be an integer

Test present: integer_validator(“age”, [3])
     >>> try:
     ...     bg.integer_validator("age", [3])
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [TypeError] age must be an integer

Test present: integer_validator(“age”, True)
     >>> try:
     ...     bg.integer_validator("age", True)
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [TypeError] age must be an integer

Test present: integer_validator(“age”, {3, 4})
     >>> try:
     ...     bg.integer_validator("age", {3, 4})
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [TypeError] age must be an integer


Test present: integer_validator(“age”, None)
     >>> try:
     ...     bg.integer_validator("age", None)
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     ... 
     [TypeError] age must be an integer